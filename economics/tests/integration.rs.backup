use economics::*;

#[test]
fn test_supply_management() {
    let mut supply = SupplyManager::new();

    supply.mint(1000);
    assert_eq!(supply.stats().total_minted, 1000);
    assert_eq!(supply.stats().circulating_supply, 1000);

    supply.burn(100);
    assert_eq!(supply.stats().total_burned, 100);
    assert_eq!(supply.stats().circulating_supply, 900);
    assert_eq!(supply.net_supply(), 900);
}

#[test]
fn test_reward_calculation() {
    let reward = RewardCalculator::calculate_block_reward(1);

    assert_eq!(reward.treasury_reward, 5 * constants::TIME_UNIT);
    assert_eq!(reward.masternode_reward, 95 * constants::TIME_UNIT);
    assert_eq!(reward.total_reward, 100 * constants::TIME_UNIT);
}

#[test]
fn test_fee_split() {
    let fee = 1000;
    let (treasury, masternode) = RewardCalculator::split_transaction_fee(fee);

    assert_eq!(treasury, 500); // 50%
    assert_eq!(masternode, 500); // 50%
}

#[test]
fn test_masternode_apy() {
    let collateral = 10_000 * constants::TIME_UNIT;
    let daily = 50 * constants::TIME_UNIT;

    let apy = RewardCalculator::calculate_masternode_apy(collateral, daily);

    // Should be around 18.25% APY
    assert!(apy > 18.0 && apy < 19.0);
}
